{"version":3,"file":"parse.js","sourceRoot":"","sources":["../../../../src/compile/layoutsize/parse.ts"],"names":[],"mappings":"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","sourcesContent":["import {getSizeType, POSITION_SCALE_CHANNELS} from '../../channel';\nimport {getViewConfigContinuousSize, getViewConfigDiscreteSize} from '../../config';\nimport {hasDiscreteDomain} from '../../scale';\nimport {isStep} from '../../spec/base';\nimport {isVgRangeStep} from '../../vega.schema';\nimport {ConcatModel} from '../concat';\nimport {Model} from '../model';\nimport {Explicit, mergeValuesWithExplicit} from '../split';\nimport {UnitModel} from '../unit';\nimport {LayoutSize, LayoutSizeIndex} from './component';\n\nexport function parseLayerLayoutSize(model: Model) {\n  parseChildrenLayoutSize(model);\n\n  const layoutSizeCmpt = model.component.layoutSize;\n  layoutSizeCmpt.setWithExplicit('width', parseNonUnitLayoutSizeForChannel(model, 'width'));\n  layoutSizeCmpt.setWithExplicit('height', parseNonUnitLayoutSizeForChannel(model, 'height'));\n}\n\nexport const parseRepeatLayoutSize = parseLayerLayoutSize;\n\nconst SIZE_TYPE_TO_MERGE = {\n  vconcat: 'width',\n  hconcat: 'height'\n};\n\nexport function parseConcatLayoutSize(model: ConcatModel) {\n  parseChildrenLayoutSize(model);\n  const layoutSizeCmpt = model.component.layoutSize;\n\n  const sizeTypeToMerge = SIZE_TYPE_TO_MERGE[model.concatType];\n  if (sizeTypeToMerge) {\n    layoutSizeCmpt.setWithExplicit(sizeTypeToMerge, parseNonUnitLayoutSizeForChannel(model, sizeTypeToMerge));\n  }\n}\n\nexport function parseChildrenLayoutSize(model: Model) {\n  for (const child of model.children) {\n    child.parseLayoutSize();\n  }\n}\n\nfunction parseNonUnitLayoutSizeForChannel(model: Model, sizeType: 'width' | 'height'): Explicit<LayoutSize> {\n  const channel = sizeType === 'width' ? 'x' : 'y';\n  const resolve = model.component.resolve;\n\n  let mergedSize: Explicit<LayoutSize>;\n  // Try to merge layout size\n  for (const child of model.children) {\n    const childSize = child.component.layoutSize.getWithExplicit(sizeType);\n    const scaleResolve = resolve.scale[channel];\n    if (scaleResolve === 'independent' && childSize.value === 'step') {\n      // Do not merge independent scales with range-step as their size depends\n      // on the scale domains, which can be different between scales.\n      mergedSize = undefined;\n      break;\n    }\n\n    if (mergedSize) {\n      if (scaleResolve === 'independent' && mergedSize.value !== childSize.value) {\n        // For independent scale, only merge if all the sizes are the same.\n        // If the values are different, abandon the merge!\n        mergedSize = undefined;\n        break;\n      }\n      mergedSize = mergeValuesWithExplicit<LayoutSizeIndex, LayoutSize>(mergedSize, childSize, sizeType, '');\n    } else {\n      mergedSize = childSize;\n    }\n  }\n\n  if (mergedSize) {\n    // If merged, rename size and set size of all children.\n    for (const child of model.children) {\n      model.renameSignal(child.getName(sizeType), model.getName(sizeType));\n      child.component.layoutSize.set(sizeType, 'merged', false);\n    }\n    return mergedSize;\n  } else {\n    // Otherwise, there is no merged size.\n    return {\n      explicit: false,\n      value: undefined\n    };\n  }\n}\n\nexport function parseUnitLayoutSize(model: UnitModel) {\n  const {size, component} = model;\n  for (const channel of POSITION_SCALE_CHANNELS) {\n    const sizeType = getSizeType(channel);\n\n    if (size[sizeType]) {\n      const specifiedSize = size[sizeType];\n      component.layoutSize.set(sizeType, isStep(specifiedSize) ? 'step' : specifiedSize, true);\n    } else {\n      const defaultSize = defaultUnitSize(model, sizeType);\n      component.layoutSize.set(sizeType, defaultSize, false);\n    }\n  }\n}\n\nfunction defaultUnitSize(model: UnitModel, sizeType: 'width' | 'height'): LayoutSize {\n  const channel = sizeType === 'width' ? 'x' : 'y';\n  const config = model.config;\n  const scaleComponent = model.getScaleComponent(channel);\n\n  if (scaleComponent) {\n    const scaleType = scaleComponent.get('type');\n    const range = scaleComponent.get('range');\n\n    if (hasDiscreteDomain(scaleType)) {\n      const size = getViewConfigDiscreteSize(config.view, sizeType);\n      if (isVgRangeStep(range) || isStep(size)) {\n        // For discrete domain with range.step, use dynamic width/height\n        return 'step';\n      } else {\n        return size;\n      }\n    } else {\n      return getViewConfigContinuousSize(config.view, sizeType);\n    }\n  } else if (model.hasProjection) {\n    return getViewConfigContinuousSize(config.view, sizeType);\n  } else {\n    const size = getViewConfigDiscreteSize(config.view, sizeType);\n    return isStep(size) ? size.step : size;\n  }\n}\n"]}