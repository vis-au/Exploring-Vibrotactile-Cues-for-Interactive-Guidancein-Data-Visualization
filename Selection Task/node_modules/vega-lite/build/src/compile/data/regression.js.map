{"version":3,"file":"regression.js","sourceRoot":"","sources":["../../../../src/compile/data/regression.ts"],"names":[],"mappings":";AAEA,OAAO,EAAC,SAAS,EAAE,IAAI,EAAC,MAAM,YAAY,CAAC;AAC3C,OAAO,EAAC,YAAY,EAAC,MAAM,YAAY,CAAC;AAExC;;GAEG;AACH,MAAM,OAAO,uBAAwB,SAAQ,YAAY;IAKvD,YAAY,MAAoB,EAAU,SAA8B;QACtE,KAAK,CAAC,MAAM,CAAC,CAAC;QAD0B,cAAS,GAAT,SAAS,CAAqB;QAEtE,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC,oCAAoC;QAC3E,MAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,EAAE,IAAI,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QAChE,IAAI,CAAC,SAAS,CAAC,EAAE,GAAG,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,EAAE,EAAE,WAAW,CAAC,CAAC,CAAC,IAAI,SAAS,CAAC,UAAU,CAAC,CAAC;IAC/F,CAAC;IATM,KAAK;QACV,OAAO,IAAI,uBAAuB,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACtE,CAAC;IASM,eAAe;QACpB,OAAO,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,EAAE,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IACpG,CAAC;IAEM,cAAc;QACnB,OAAO,IAAI,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC;IACpC,CAAC;IAEM,IAAI;QACT,OAAO,uBAAuB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;IACvD,CAAC;IAEM,QAAQ;QACb,MAAM,mBAA0C,EAA1C,EAAC,UAAU,EAAE,EAAE,OAA2B,EAAzB,uCAAyB,CAAC;QACjD,MAAM,MAAM,mBACV,IAAI,EAAE,YAAY,EAClB,CAAC,EAAE,EAAE,EACL,CAAC,EAAE,UAAU,IACV,IAAI,CACR,CAAC;QACF,OAAO,MAAM,CAAC;IAChB,CAAC;CACF","sourcesContent":["import {RegressionTransform as VgRegressionTransform} from 'vega';\nimport {RegressionTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for regression transform nodes\n */\nexport class RegressionTransformNode extends DataFlowNode {\n  public clone() {\n    return new RegressionTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private transform: RegressionTransform) {\n    super(parent);\n    this.transform = duplicate(transform); // duplicate to prevent side effects\n    const specifiedAs = this.transform.as || [undefined, undefined];\n    this.transform.as = [specifiedAs[0] || transform.on, specifiedAs[1] || transform.regression];\n  }\n\n  public dependentFields() {\n    return new Set([this.transform.regression, this.transform.on, ...(this.transform.groupby || [])]);\n  }\n\n  public producedFields() {\n    return new Set(this.transform.as);\n  }\n\n  public hash() {\n    return `RegressionTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgRegressionTransform {\n    const {regression, on, ...rest} = this.transform;\n    const result: VgRegressionTransform = {\n      type: 'regression',\n      x: on,\n      y: regression,\n      ...rest\n    };\n    return result;\n  }\n}\n"]}