{"version":3,"file":"pivot.js","sourceRoot":"","sources":["../../../../src/compile/data/pivot.ts"],"names":[],"mappings":"AACA,OAAO,EAAC,SAAS,EAAE,IAAI,EAAE,MAAM,EAAC,MAAM,YAAY,CAAC;AAEnD,OAAO,EAAC,YAAY,EAAC,MAAM,YAAY,CAAC;AAExC;;GAEG;AACH,MAAM,OAAO,kBAAmB,SAAQ,YAAY;IAKlD,YAAY,MAAoB,EAAU,SAAyB;QACjE,KAAK,CAAC,MAAM,CAAC,CAAC;QAD0B,cAAS,GAAT,SAAS,CAAgB;IAEnE,CAAC;IANM,KAAK;QACV,OAAO,IAAI,kBAAkB,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IACjE,CAAC;IAMM,aAAa,CAAC,MAAgB;QACnC,IAAI,CAAC,SAAS,CAAC,OAAO,GAAG,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACzF,CAAC;IAEM,cAAc;QACnB,OAAO,SAAS,CAAC,CAAC,0EAA0E;IAC9F,CAAC;IAEM,eAAe;QACpB,OAAO,IAAI,GAAG,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,EAAE,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAClG,CAAC;IAEM,IAAI;QACT,OAAO,kBAAkB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;IAClD,CAAC;IAEM,QAAQ;QACb,MAAM,EAAC,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,EAAC,GAAG,IAAI,CAAC,SAAS,CAAC;QAC1D,mDACE,IAAI,EAAE,OAAO,EACb,KAAK,EAAE,KAAK,EACZ,KAAK,IACF,CAAC,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,EAAC,KAAK,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GACpC,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC,CAAC,EAAC,EAAE,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,GAC9B,CAAC,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,EAAC,OAAO,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAC3C;IACJ,CAAC;CACF","sourcesContent":["import {PivotTransform} from '../../transform';\nimport {duplicate, hash, unique} from '../../util';\nimport {VgPivotTransform} from '../../vega.schema';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for pivot transform nodes.\n */\nexport class PivotTransformNode extends DataFlowNode {\n  public clone() {\n    return new PivotTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private transform: PivotTransform) {\n    super(parent);\n  }\n\n  public addDimensions(fields: string[]) {\n    this.transform.groupby = unique((this.transform.groupby || []).concat(fields), d => d);\n  }\n\n  public producedFields(): undefined {\n    return undefined; // return undefined so that potentially everything can depend on the pivot\n  }\n\n  public dependentFields() {\n    return new Set([this.transform.pivot, this.transform.value, ...(this.transform.groupby || [])]);\n  }\n\n  public hash() {\n    return `PivotTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgPivotTransform {\n    const {pivot, value, groupby, limit, op} = this.transform;\n    return {\n      type: 'pivot',\n      field: pivot,\n      value,\n      ...(limit !== undefined ? {limit} : {}),\n      ...(op !== undefined ? {op} : {}),\n      ...(groupby !== undefined ? {groupby} : {})\n    };\n  }\n}\n"]}