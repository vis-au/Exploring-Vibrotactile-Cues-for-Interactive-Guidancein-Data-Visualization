{"version":3,"file":"rangestep.js","sourceRoot":"","sources":["../../../src/normalize/rangestep.ts"],"names":[],"mappings":";AAAA,OAAO,EAAC,WAAW,EAAE,uBAAuB,EAAC,MAAM,YAAY,CAAC;AAChE,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AAEzC,OAAO,KAAK,GAAG,MAAM,QAAQ,CAAC;AAG9B,OAAO,EAAkB,UAAU,EAAqB,MAAM,cAAc,CAAC;AAC7E,OAAO,EAAC,IAAI,EAAC,MAAM,SAAS,CAAC;AAK7B,MAAM,OAAO,mBAAmB;IAAhC;QACS,SAAI,GAAG,WAAW,CAAC;IAgD5B,CAAC;IA9CQ,eAAe,CAAC,IAA2B;QAChD,IAAI,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,QAAQ,EAAE;YACrC,KAAK,MAAM,OAAO,IAAI,uBAAuB,EAAE;gBAC7C,MAAM,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;gBACnC,IAAI,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;oBAC1B,IAAI,GAAG,IAAI,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;wBAC9C,OAAO,IAAI,CAAC;qBACb;iBACF;aACF;SACF;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,GAAG,CAAC,IAA2B;QACpC,MAAM,UAAU,GAAG,EAAE,CAAC;QACtB,IAAI,QAAQ,qBAAO,IAAI,CAAC,QAAQ,CAAC,CAAC;QAElC,KAAK,MAAM,OAAO,IAAI,uBAAuB,EAAE;YAC7C,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,CAAC,CAAC;YACtC,MAAM,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;YAC9B,IAAI,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;gBAC1B,IAAI,GAAG,IAAI,GAAG,CAAC,KAAK,IAAI,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,EAAE;oBAC9C,MAAM,EAAC,KAAK,KAAwB,GAAG,EAAzB,wCAAyB,CAAC;oBAExC,MAAM,UAA4E,EAA5E,EAAC,SAAS,OAAkE,EAAhE,iDAAgE,CAAC;oBACnF,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAC,IAAI,EAAE,KAAK,CAAC,WAAW,CAAC,EAAC,CAAC;oBAElD,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;oBAE5C,QAAQ,mCACH,QAAQ,KACX,CAAC,OAAO,CAAC,kCACJ,eAAe,GACf,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,KAAK,EAAE,qBAAqB,EAAC,CAAC,CAAC,CAAC,EAAE,CAAC,IAEhF,CAAC;iBACH;aACF;SACF;QACD,qDACK,UAAU,GACV,IAAI,KACP,QAAQ,IACR;IACJ,CAAC;CACF","sourcesContent":["import {getSizeType, POSITION_SCALE_CHANNELS} from '../channel';\nimport {isFieldDef} from '../channeldef';\nimport {Encoding} from '../encoding';\nimport * as log from '../log';\nimport {Scale} from '../scale';\nimport {GenericSpec} from '../spec/index';\nimport {GenericUnitSpec, isUnitSpec, NormalizedUnitSpec} from '../spec/unit';\nimport {keys} from '../util';\nimport {NonFacetUnitNormalizer} from './base';\n\ntype UnitSpecWithRangeStep = GenericUnitSpec<Encoding<string>, any>; // this is not accurate, but it's not worth making it accurate\n\nexport class RangeStepNormalizer implements NonFacetUnitNormalizer<UnitSpecWithRangeStep> {\n  public name = 'RangeStep';\n\n  public hasMatchingType(spec: GenericSpec<any, any>): spec is UnitSpecWithRangeStep {\n    if (isUnitSpec(spec) && spec.encoding) {\n      for (const channel of POSITION_SCALE_CHANNELS) {\n        const def = spec.encoding[channel];\n        if (def && isFieldDef(def)) {\n          if (def && def.scale && def.scale['rangeStep']) {\n            return true;\n          }\n        }\n      }\n    }\n    return false;\n  }\n\n  public run(spec: UnitSpecWithRangeStep): NormalizedUnitSpec {\n    const sizeMixins = {};\n    let encoding = {...spec.encoding};\n\n    for (const channel of POSITION_SCALE_CHANNELS) {\n      const sizeType = getSizeType(channel);\n      const def = encoding[channel];\n      if (def && isFieldDef(def)) {\n        if (def && def.scale && def.scale['rangeStep']) {\n          const {scale, ...defWithoutScale} = def;\n\n          const {rangeStep, ...scaleWithoutRangeStep} = scale as Scale & {rangeStep: number};\n          sizeMixins[sizeType] = {step: scale['rangeStep']};\n\n          log.warn(log.message.RANGE_STEP_DEPRECATED);\n\n          encoding = {\n            ...encoding,\n            [channel]: {\n              ...defWithoutScale,\n              ...(keys(scaleWithoutRangeStep).length ? {scale: scaleWithoutRangeStep} : {})\n            }\n          };\n        }\n      }\n    }\n    return {\n      ...sizeMixins,\n      ...spec,\n      encoding\n    };\n  }\n}\n"]}